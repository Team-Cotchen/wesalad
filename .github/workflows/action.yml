name: Docker Build & Deploy
run-name: Github Action is running

# main branch에 push 또는 pull request 시에만 작동
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-depoly:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt 
          pip install python-dotenv

      - name: Create my_settings.py
        env:
          MY_SETTINGS_SECRET: ${{ secrets.MY_SETTINGS_SECRET }}
        run: |
          cd backend
          echo "import os" > my_settings.py
          echo "from dotenv import load_dotenv" >> my_settings.py
          echo "load_dotenv()" >> my_settings.py
          echo "SECRET_KEY = os.environ.get('SECRET_KEY')" >> my_settings.py
          echo "DATABASES = eval(os.environ.get('DATABASES', '{}'))" >> my_settings.py
          echo "ALGORITHM = os.environ.get('ALGORITHM')" >> my_settings.py
          echo "GOOGLE_OAUTH2_REDIRECT_URI = os.environ.get('GOOGLE_OAUTH2_REDIRECT_URI')" >> my_settings.py
          echo "GOOGLE_OAUTH2_CLIENT_ID = os.environ.get('GOOGLE_OAUTH2_CLIENT_ID')" >> my_settings.py
          echo "GOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get('GOOGLE_OAUTH2_CLIENT_SECRET')" >> my_settings.py
          echo "GOOGLE_MAIL_ADDRESS = os.environ.get('GOOGLE_MAIL_ADDRESS')" >> my_settings.py
          echo "GOOGLE_MAIL_APP_PWD = os.environ.get('GOOGLE_MAIL_APP_PWD')" >> my_settings.py
          echo $MY_SETTINGS_SECRET | base64 --decode >> my_settings.py
          
          printf $SECRET_KEY

      
      - name: Run Django Test
        run: |
          if python backend/manage.py test backend/apps; then
            echo "::set-output name=test_result::OK"
          else
            echo "::set-output name=test_result::FAILED"
            exit 1
          fi
        
      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      
      # backend docker file 작성
      - name: Build Backend Docker images
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME}}/backend:latest
          
      # frontend docker file 작성
      - name: Build Frontend Docker images
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME}}/frontend:latest
            
      # ssh로 wesald EC2 접속.
      - name: Into Wesalad EC2
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.PEM_KEY }}
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME}}
      
      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      
      # 최신 docker image 가져오기
      - name: Pull Docker Image
        run: |
          docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/backend:latest
          docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:latest
          docker-compose down
          docker-compose up -d --force-recreate